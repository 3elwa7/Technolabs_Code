import pandas as pd
pd.set_option('max_rows', 5)
from learntools.core import binder; binder.bind(globals())
from learntools.pandas.creating_reading_and_writing import *
print("Setup complete.")
fruits = pd.DataFrame({"Apples":[30],"Bananas":[21]})

# Check your answer
q1.check()
fruits
# Your code goes here. Create a dataframe matching the above diagram and assign it to the variable fruit_sales.
fruit_sales = pd.DataFrame({"Apples":[35,41],"Bananas":[21,34]},index=["2017 Sales","2018 Sales"])

# Check your answer
q2.check()
fruit_sales
ingredients = pd.Series(["4 cups","1 cup","2 large","1 can"],index=["Flour","Milk","Eggs","Spam"],name="Dinner")

# Check your answer
q3.check()
ingredients
reviews = pd.read_csv("../input/wine-reviews/winemag-data_first150k.csv", index_col=0)

# Check your answer
q4.check()
reviews
animals = pd.DataFrame({'Cows': [12, 20], 'Goats': [22, 19]}, index=['Year 1', 'Year 2'])
animals
animals.to_csv("cows_and_goats.csv")
# Check your answer
q5.check()
import pandas as pd
​
reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)
pd.set_option("display.max_rows", 5)
​
from learntools.core import binder; binder.bind(globals())
from learntools.pandas.indexing_selecting_and_assigning import *
print("Setup complete.")
reviews.head()
desc = reviews.description
# Check your answer
q1.check()
first_description = desc[0]

# Check your answer
q2.check()
first_description
first_row = reviews.iloc[0]

# Check your answer
q3.check()
first_row
first_descriptions = desc.iloc[0:10]

# Check your answer
q4.check()
first_descriptions
sample_reviews = reviews.iloc[[1,2,3,5,8]]

# Check your answer
q5.check()
sample_reviews
df = reviews.loc[[0,1,10,100],["country","province","region_1","region_2"]]

# Check your answer
q6.check()
df
df = reviews.loc[0:99,['country','variety']]
# Check your answer
q7.check()
df
italian_wines = reviews[reviews.country == 'Italy']
# Check your answer
q8.check()
top_oceania_wines = reviews.loc[(reviews.country.isin(['Australia','New Zealand'])) & (reviews.points >= 95)]


# Check your answer
q9.check()
top_oceania_wines
import pandas as pd
pd.set_option("display.max_rows", 5)
reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.summary_functions_and_maps import *
print("Setup complete.")

reviews.head()
import pandas as pd
pd.set_option("display.max_rows", 5)
reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.summary_functions_and_maps import *
print("Setup complete.")

reviews.head()
median_points = reviews.points.median()

# Check your answer
q1.check()
countries = reviews.country.unique()

# Check your answer
q2.check()
reviews_per_country = reviews.country.value_counts()


# Check your answer
q3.check()
centered_price = reviews.price - reviews.price.mean()

# Check your answer
q4.check()
bargain_idx = (reviews.points / reviews.price).idxmax()
bargain_wine = reviews.loc[bargain_idx, 'title']
# Check your answer
q5.check()
map1 = reviews.description.map(lambda desc: "tropical" in desc).sum()
map2 = reviews.description.map(lambda desc: "fruity" in desc).sum()

descriptor_counts = pd.Series([map1,map2],index=['tropical','fruity'])

# Check your answer
q6.check()
def stars(row):
    if row.country == 'Canada':
        return 3
    elif row.points >= 95:
        return 3
    elif row.points >= 85:
        return 2
    else:
        return 1

star_ratings = reviews.apply(stars, axis='columns')
# Check your answer
q7.check()
import pandas as pd

reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)
#pd.set_option("display.max_rows", 5)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.grouping_and_sorting import *
print("Setup complete.")
# Your code here
reviews_written = reviews.groupby("taster_twitter_handle").taster_twitter_handle.count()

# Check your answer
q1.check()
best_rating_per_price = reviews.groupby("price").points.max().sort_index()

# Check your answer
q2.check()
price_extremes = reviews.groupby("variety").price.agg([min,max])

# Check your answer
q3.check()
sorted_varieties = price_extremes.sort_values(by=["min","max"],ascending=False)

# Check your answer
q4.check()
reviewer_mean_ratings = reviewer_mean_ratings = reviews.groupby('taster_name').points.mean()


# Check your answer
q5.check()
reviewer_mean_ratings.describe()
country_variety_counts = reviews.groupby(['country', 'variety']).size().sort_values(ascending=False)

# Check your answer
q6.check()
import pandas as pd

reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.data_types_and_missing_data import *
print("Setup complete.")
# Your code here
dtype = reviews.points.dtype

# Check your answer
q1.check()
point_strings = reviews.points.astype("str")

# Check your answer
q2.check()
n_missing_prices = reviews.price.isnull().sum()
print(n_missing_prices)
# Check your answer
q3.check()
reviews_per_region = reviews.region_1.fillna('Unknown').value_counts().sort_values(ascending=False)

# Check your answer
q4.check()
import pandas as pd

reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.renaming_and_combining import *
print("Setup complete.")
reviews.head()
# Your code here
renamed = reviews.rename(columns=dict(region_1='region', region_2='locale'))
# Check your answer
q1.check()
reindexed = reviews.rename_axis('wines', axis='rows')

# Check your answer
q2.check()
gaming_products = pd.read_csv("../input/things-on-reddit/top-things/top-things/reddits/g/gaming.csv")
gaming_products['subreddit'] = "r/gaming"
movie_products = pd.read_csv("../input/things-on-reddit/top-things/top-things/reddits/m/movies.csv")
movie_products['subreddit'] = "r/movies"
combined_products = pd.concat([gaming_products, movie_products])

# Check your answer
q3.check()
powerlifting_meets = pd.read_csv("../input/powerlifting-database/meets.csv")
powerlifting_competitors = pd.read_csv("../input/powerlifting-database/openpowerlifting.csv")
powerlifting_combined = powerlifting_meets.set_index("MeetID").join(powerlifting_competitors.set_index("MeetID"))

# Check your answer
q4.check()
